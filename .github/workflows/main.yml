name: CICD

on:
  push:
    branches:
      - main

env:
  JAVA_VERSION: '17'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configurar Ambiente
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'adopt'
        cache: maven

    - name: Compilar projet
      run: mvn compile

  test:
    name: Testes
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        test-group:
          - unit
          - integration
    steps:
      - name: Checkout do código-fonte
        uses: actions/checkout@v2
      
      - name: Configurar o Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'
          cache: maven
      
      - name: Executar Testes Unitários
        if: ${{ matrix.test-group == 'unit' }}
        run: mvn test
      
      - name: Executar Testes Integrados
        if: ${{ matrix.test-group == 'integration' }}
        run: mvn test -Pintegration-test

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
    
      - name: Deploy Allure Report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          allure_results: target/allure-results
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

  system-test:
    name: System Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout do código-fonte
        uses: actions/checkout@v2
      
      - name: Configurar o Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'
          cache: maven

      - name: Empacotar aplicação
        run: mvn package

      - name: Iniciar o aplicativo
        run: java -jar target/demo-codigo*.jar &
      
      - name: Esperar pela inicialização do aplicativo
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            for i in {1..30}; do
              status=$(curl --request GET 'http://localhost:8080/actuator/health' | jq -r '.status')
              if [[ "$status" == "UP" ]]; then
                echo "Aplicativo iniciado com sucesso!"
                break
              fi
              sleep 1
            done

      - name: Executar testes de sistema
        run: mvn test -Psystem-test

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Deploy Allure Report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          allure_results: target/allure-results
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history


  # sonarqube:
  #   name: Inspeção SonarQube
  #   needs: system-test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout do código-fonte
  #       uses: actions/checkout@v2
        
  #     - name: Configurar o Java
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: ${{ env.JAVA_VERSION }}

  #     - name: Analisar com o SonarQube
  #       uses: SonarSource/sonarqube-scan-action@v1
  #       with:
  #         projectBaseDir: .
  #         token: ${{ secrets.SONARQUBE_TOKEN }}